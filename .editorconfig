# EditorConfig is awesome: https://EditorConfig.org

# top-most EditorConfig file
root = true

# All files
[*]
indent_style = space
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true
charset = utf-8

# Code files
[*.{cs,csx,vb,vbx}]
indent_size = 4

# XML project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# XML config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# JSON files
[*.json]
indent_size = 2

# YAML files
[*.{yml,yaml}]
indent_size = 2

# Markdown files
[*.md]
trim_trailing_whitespace = false

# Web files
[*.{htm,html,js,ts,tsx,css,sass,scss,less,svg}]
indent_size = 2

# Batch files
[*.{cmd,bat}]
end_of_line = crlf

# Shell files
[*.sh]
end_of_line = lf

# .NET Coding Conventions
[*.{cs,vb}]

# Organize usings
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false

# this. preferences
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:suggestion
dotnet_style_readonly_field = true:suggestion

# Expression-level preferences
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_auto_properties = true:silent
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = true:silent

# C# Coding Conventions
[*.cs]

# var preferences
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = true:suggestion

# Expression-bodied members
csharp_style_expression_bodied_methods = false:silent
csharp_style_expression_bodied_constructors = false:silent
csharp_style_expression_bodied_operators = false:silent
csharp_style_expression_bodied_properties = true:silent
csharp_style_expression_bodied_indexers = true:silent
csharp_style_expression_bodied_accessors = true:silent

# Pattern matching preferences
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion

# Null-checking preferences
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion

# Modifier preferences
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion

# Expression-level preferences
csharp_prefer_braces = true:silent
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_prefer_simple_using_statement = true:suggestion
csharp_style_prefer_switch_expression = true:suggestion

# C# Formatting Rules
# New line preferences
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left

# Space preferences
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_open_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_statements = true
csharp_preserve_single_line_blocks = true

# .NET Code Quality Rules
[*.{cs,vb}]

# CA1008: Enums should have zero value
dotnet_diagnostic.CA1008.severity = suggestion

# CA1016: Mark assemblies with assembly version
dotnet_diagnostic.CA1016.severity = warning

# CA1033: Interface methods should be callable by child types
dotnet_diagnostic.CA1033.severity = suggestion

# CA1049: Types that own native resources should be disposable
dotnet_diagnostic.CA1049.severity = warning

# CA1060: Move pinvokes to native methods class
dotnet_diagnostic.CA1060.severity = suggestion

# CA1061: Do not hide base class methods
dotnet_diagnostic.CA1061.severity = warning

# CA1063: Implement IDisposable Correctly
dotnet_diagnostic.CA1063.severity = warning

# CA1065: Do not raise exceptions in unexpected locations
dotnet_diagnostic.CA1065.severity = warning

# CA1301: Avoid duplicate accelerators
dotnet_diagnostic.CA1301.severity = suggestion

# CA1400: P/Invoke entry points should exist
dotnet_diagnostic.CA1400.severity = warning

# CA1401: P/Invokes should not be visible
dotnet_diagnostic.CA1401.severity = warning

# CA1403: Auto layout types should not be COM visible
dotnet_diagnostic.CA1403.severity = warning

# CA1404: Call GetLastError immediately after P/Invoke
dotnet_diagnostic.CA1404.severity = warning

# CA1405: COM visible type base types should be COM visible
dotnet_diagnostic.CA1405.severity = warning

# CA1410: COM registration methods should be matched
dotnet_diagnostic.CA1410.severity = warning

# CA1415: Declare P/Invokes correctly
dotnet_diagnostic.CA1415.severity = warning

# CA1821: Remove empty Finalizers
dotnet_diagnostic.CA1821.severity = warning

# CA1900: Value type fields should be portable
dotnet_diagnostic.CA1900.severity = warning

# CA1901: P/Invoke declarations should be portable
dotnet_diagnostic.CA1901.severity = warning

# CA2002: Do not lock on objects with weak identity
dotnet_diagnostic.CA2002.severity = warning

# CA2100: Review SQL queries for security vulnerabilities
dotnet_diagnostic.CA2100.severity = warning

# CA2101: Specify marshaling for P/Invoke string arguments
dotnet_diagnostic.CA2101.severity = warning

# CA2108: Review declarative security on value types
dotnet_diagnostic.CA2108.severity = warning

# CA2111: Pointers should not be visible
dotnet_diagnostic.CA2111.severity = warning

# CA2112: Secured types should not expose fields
dotnet_diagnostic.CA2112.severity = warning

# CA2114: Method security should be a superset of type
dotnet_diagnostic.CA2114.severity = warning

# CA2116: APTCA methods should only call APTCA methods
dotnet_diagnostic.CA2116.severity = warning

# CA2117: APTCA types should only extend APTCA base types
dotnet_diagnostic.CA2117.severity = warning

# CA2122: Do not indirectly expose methods with link demands
dotnet_diagnostic.CA2122.severity = warning

# CA2123: Override link demands should be identical to base
dotnet_diagnostic.CA2123.severity = warning

# CA2124: Wrap vulnerable finally clauses in outer try
dotnet_diagnostic.CA2124.severity = warning

# CA2126: Type link demands require inheritance demands
dotnet_diagnostic.CA2126.severity = warning

# CA2131: Security critical types may not participate in type equivalence
dotnet_diagnostic.CA2131.severity = warning

# CA2132: Default constructors must be at least as critical as base type default constructors
dotnet_diagnostic.CA2132.severity = warning

# CA2133: Delegates must bind to methods with consistent transparency
dotnet_diagnostic.CA2133.severity = warning

# CA2134: Methods must keep consistent transparency when overriding base methods
dotnet_diagnostic.CA2134.severity = warning

# CA2137: Transparent methods must contain only verifiable IL
dotnet_diagnostic.CA2137.severity = warning

# CA2138: Transparent methods must not call methods with the SuppressUnmanagedCodeSecurity attribute
dotnet_diagnostic.CA2138.severity = warning

# CA2140: Transparent code must not reference security critical items
dotnet_diagnostic.CA2140.severity = warning

# CA2141: Transparent methods must not satisfy LinkDemands
dotnet_diagnostic.CA2141.severity = warning

# CA2146: Types must be at least as critical as their base types and interfaces
dotnet_diagnostic.CA2146.severity = warning

# CA2147: Transparent methods may not use security asserts
dotnet_diagnostic.CA2147.severity = warning

# CA2149: Transparent methods must not call into native code
dotnet_diagnostic.CA2149.severity = warning

# CA2200: Rethrow to preserve stack details
dotnet_diagnostic.CA2200.severity = warning

# CA2202: Do not dispose objects multiple times
dotnet_diagnostic.CA2202.severity = warning

# CA2207: Initialize value type static fields inline
dotnet_diagnostic.CA2207.severity = warning

# CA2212: Do not mark serviced components with WebMethod
dotnet_diagnostic.CA2212.severity = warning

# CA2213: Disposable fields should be disposed
dotnet_diagnostic.CA2213.severity = warning

# CA2214: Do not call overridable methods in constructors
dotnet_diagnostic.CA2214.severity = warning

# CA2216: Disposable types should declare finalizer
dotnet_diagnostic.CA2216.severity = warning

# CA2220: Finalizers should call base class finalizer
dotnet_diagnostic.CA2220.severity = warning

# CA2229: Implement serialization constructors
dotnet_diagnostic.CA2229.severity = warning

# CA2231: Overload operator equals on overriding value type Equals
dotnet_diagnostic.CA2231.severity = warning

# CA2232: Mark Windows Forms entry points with STAThread
dotnet_diagnostic.CA2232.severity = warning

# CA2235: Mark all non-serializable fields
dotnet_diagnostic.CA2235.severity = warning

# CA2236: Call base class methods on ISerializable types
dotnet_diagnostic.CA2236.severity = warning

# CA2237: Mark ISerializable types with serializable
dotnet_diagnostic.CA2237.severity = warning

# CA2238: Implement serialization methods correctly
dotnet_diagnostic.CA2238.severity = warning

# CA2240: Implement ISerializable correctly
dotnet_diagnostic.CA2240.severity = warning

# CA2241: Provide correct arguments to formatting methods
dotnet_diagnostic.CA2241.severity = warning

# CA2242: Test for NaN correctly
dotnet_diagnostic.CA2242.severity = warning